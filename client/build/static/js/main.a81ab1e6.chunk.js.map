{"version":3,"sources":["utils/API.js","pages/Medications/Medications.js","App.js","registerServiceWorker.js","index.js"],"names":["API","getDrugs","axios","get","Medications","_useState","useState","_useState2","Object","slicedToArray","drugs","useEffect","then","res","console","log","data","catch","err","react_default","a","createElement","require","config","App","Medications_Medications","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","error","ReactDOM","render","src_App","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"uQAKeA,EAAA,CACXC,SAAU,WACN,OAAOC,IAAMC,IAAI,gBCkBVC,MAtBf,WAAuB,IAAAC,EACOC,mBAAS,IADhBC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACZK,EADYH,EAAA,GAiBnB,OAjBmBA,EAAA,GAInBI,oBAAU,WAMRX,EAAIC,WACDW,KAAK,SAAAC,GAAG,OACPC,QAAQC,IAAIF,EAAIG,KAAK,MAEtBC,MAAM,SAAAC,GAAG,OAAIJ,QAAQC,IAAIG,MAR3B,IAYCC,EAAAC,EAAAC,cAAA,UAAKX,IClBbY,EAAQ,IAAUC,aAYHC,mLARX,OACEL,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACI,EAAD,cAJUC,aCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DA6BN,SAASC,EAAgBC,GACvBC,UAAUC,cACPC,SAASH,GACTtB,KAAK,SAAA0B,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACtCD,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfR,UAAUC,cAAcQ,WAK1B9B,QAAQC,IAAI,6CAKZD,QAAQC,IAAI,2CAMrBE,MAAM,SAAA4B,GACL/B,QAAQ+B,MAAM,4CAA6CA,KCjEjEvB,EAAQ,IAAUC,SAElBuB,IAASC,OAAO5B,EAAAC,EAAAC,cAAC2B,EAAD,MAASC,SAASC,eAAe,SDalC,WACb,GAA6C,kBAAmBf,UAAW,CAGzE,GADkB,IAAIgB,IAAIC,GAAwBvB,OAAOC,UAC3CuB,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,OAAQ,WAC9B,IAAMpB,EAAK,GAAAqB,OAAMH,GAAN,sBAENzB,EAwCX,SAAiCO,GAE/BsB,MAAMtB,GACHtB,KAAK,SAAA6C,GAGkB,MAApBA,EAASC,SACuD,IAAhED,EAASE,QAAQxD,IAAI,gBAAgByD,QAAQ,cAG7CzB,UAAUC,cAAcyB,MAAMjD,KAAK,SAAA0B,GACjCA,EAAawB,aAAalD,KAAK,WAC7BiB,OAAOC,SAASiC,aAKpB9B,EAAgBC,KAGnBjB,MAAM,WACLH,QAAQC,IACN,mEAzDAiD,CAAwB9B,GAHxBD,EAAgBC,MC5BxB+B","file":"static/js/main.a81ab1e6.chunk.js","sourcesContent":["import axios from \"axios\";\n// require('dotenv').config();\n// console.log(process.env.REACT_APP_API_KEY);\n\n\nexport default {\n    getDrugs: function() {\n        return axios.get(\"/api/drugs\");\n        // return axios.get(`https://www.dictionaryapi.com/api/v3/references/medical/json/cetirizine?key=f57f85fe-8b49-4bf7-a104-d906698dec04`);\n    }\n};","import React, { useEffect, useState } from \"react\";\nimport API from \"../../utils/API\";\n\nfunction Medications() {\n    const [drugs, setDrugs] = useState([])\n\n    //load all drugs and store them \n    useEffect(() => {\n      loadDrugs()\n    }, [])\n  \n    //loads all drugs and set them to drugs\n    function loadDrugs() {\n      API.getDrugs()\n        .then(res => \n          console.log(res.data[0])\n        )\n        .catch(err => console.log(err));\n    };\n\n    return (\n        <h1>{drugs}</h1>\n    );\n}\n\nexport default Medications;","import React, { Component } from \"react\";\n// import \"./App.css\";\nimport Medications from \"./pages/Medications\";\nrequire('dotenv').config();\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <Medications />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (!isLocalhost) {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      } else {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log(\"New content is available; please refresh.\");\n            } else {\n              // At this point, everything has been pre-cached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport registerServiceWorker from \"./registerServiceWorker\";\nrequire('dotenv').config();\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\nregisterServiceWorker();\n"],"sourceRoot":""}